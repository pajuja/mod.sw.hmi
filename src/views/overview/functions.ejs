var robotsOnOverview = new Array();
var sensorsOnOverview = new Array();

function drawImageOnCanvas(img, targetCanvas) {
	var canvas = $(targetCanvas)[0];
	var ctx = canvas.getContext("2d");
	ctx.clearRect(0, 0, canvas.width, canvas.height);

	var parentWidth = $(targetCanvas).parent().outerWidth();
	$(targetCanvas).attr('width', parentWidth-30);
	//var parentHeight = $(targetCanvas).parent().outerHeight();
	//$(targetCanvas).attr('height', parentHeight);			
	//$(targetCanvas).attr('height', 720);				
	//floorPlanImageToWebPageScale = Math.min(canvas.width / img.width, canvas.height / img.height);
	floorPlanImageToWebPageScale = canvas.width / img.width;	
	$(targetCanvas).attr('height', img.height * floorPlanImageToWebPageScale);	
	// get the top left position of the image
	var x = (canvas.width / 2) - (img.width / 2) * floorPlanImageToWebPageScale;
	//var y = (canvas.height / 2) - (img.height / 2) * floorPlanImageToWebPageScale;			
	var y = 0; // no need to center the floor plan vertically
	//$(targetCanvas).attr('height', img.height * floorPlanImageToWebPageScale);  // resize the canvas smaller if the image is also smaller
	ctx.drawImage(img, x, y, img.width * floorPlanImageToWebPageScale, img.height * floorPlanImageToWebPageScale);	
	
    var originScaleCanvas = $("#overviewFloorplanOriginScale")[0];
	var ctx2 = originScaleCanvas.getContext("2d");
	$("#overviewFloorplanOriginScale").attr('width', parentWidth-30);		
	$("#overviewFloorplanOriginScale").attr('height', 12);	
	var scaleText = "1 m"
	var scaleDistance = ((100 / floorPlanImageScale)) * floorPlanImageToWebPageScale;
	/*
	var temp = 1;
	while (scaleDistance < 50) {
		temp++;
		scaleText = temp + " m"
		scaleDistance = ((100*temp / floorPlanImageScale)) * floorPlanImageToWebPageScale;		
	}
	while (scaleDistance > 300) {
		temp = temp/2;
		scaleText = temp + " m"
		scaleDistance = ((100*temp / floorPlanImageScale)) * floorPlanImageToWebPageScale;		
	}
	*/

	/*
	ctx2.beginPath();
	ctx2.moveTo(originScaleCanvas.width-20-scaleDistance, 10);
	ctx2.lineTo(originScaleCanvas.width-20, 10);
	ctx2.stroke();	
	ctx2.beginPath();	
	ctx2.moveTo(originScaleCanvas.width-20, 0);
	ctx2.lineTo(originScaleCanvas.width-20, 10);
	ctx2.stroke();	
	ctx2.beginPath();	
	ctx2.moveTo(originScaleCanvas.width-20-scaleDistance, 0);
	ctx2.lineTo(originScaleCanvas.width-20-scaleDistance, 10);
	ctx2.stroke();	
	ctx2.font = "12px";
	ctx2.fillStyle = "#000000";			
	ctx2.fillText(scaleText, originScaleCanvas.width-20-scaleDistance-20, 10);	
    */
	
	ctx2.beginPath();
	ctx2.moveTo(32, 10);
	ctx2.lineTo(32 + scaleDistance, 10);
	ctx2.stroke();	
	ctx2.beginPath();	
	ctx2.moveTo(32, 10);
	ctx2.lineTo(32, 4);
	ctx2.stroke();	
	ctx2.beginPath();	
	ctx2.moveTo(32 + scaleDistance, 10);
	ctx2.lineTo(32 + scaleDistance, 4);
	ctx2.stroke();	
	ctx2.font = "12px";
	ctx2.fillStyle = "#000000";			
	ctx2.fillText(scaleText, 10, 10);		
	
	var xOrigin = floorPlanImageXOffset * floorPlanImageToWebPageScale;
	var yOrigin = (img.height - floorPlanImageYOffset) * floorPlanImageToWebPageScale;			
	
	if (xOrigin <= canvas.width / 2 && yOrigin <= canvas.height / 2) {  // top left corner -> draw zero point information below on the right side
		ctx.fillStyle = "blue";	
		ctx.strokeStyle = "blue";
		ctx.beginPath();
		ctx.moveTo(xOrigin+1, yOrigin+1);
		ctx.lineTo(xOrigin+1, yOrigin+8);
		ctx.stroke();	
		ctx.beginPath();
		ctx.moveTo(xOrigin+1, yOrigin+1);
		ctx.lineTo(xOrigin+8, yOrigin+1);
		ctx.stroke();		
		ctx.font = "12px";	
		ctx.textBaseline = "top"; 
		ctx.fillText("0,0", xOrigin+5, yOrigin+5);
	} else if (xOrigin <= canvas.width / 2 && yOrigin >= canvas.height / 2) {
		ctx.fillStyle = "blue";	
		ctx.strokeStyle = "blue";
		ctx.beginPath();
		ctx.moveTo(xOrigin+1, yOrigin-1);
		ctx.lineTo(xOrigin+1, yOrigin-8);
		ctx.stroke();	
		ctx.beginPath();
		ctx.moveTo(xOrigin+1, yOrigin-1);
		ctx.lineTo(xOrigin+8, yOrigin-1);
		ctx.stroke();		
		ctx.font = "12px";
		ctx.textBaseline = "bottom"; 
		ctx.fillText("0,0", xOrigin+5, yOrigin-5);
	} else if (xOrigin >= canvas.width / 2 && yOrigin <= canvas.height / 2) {  // top right corner -> draw zero point information below on the left side
		ctx.fillStyle = "blue";	
		ctx.strokeStyle = "blue";
		ctx.beginPath();
		ctx.moveTo(xOrigin-1, yOrigin+1);
		ctx.lineTo(xOrigin-1, yOrigin+8);
		ctx.stroke();	
		ctx.beginPath();
		ctx.moveTo(xOrigin-1, yOrigin+1);
		ctx.lineTo(xOrigin-8, yOrigin+1);
		ctx.stroke();		
		ctx.font = "12px";	
		ctx.textBaseline = "top"; 
		ctx.fillText("0,0", xOrigin-20, yOrigin+5);
	} else if (xOrigin >= canvas.width / 2 && yOrigin >= canvas.height / 2) {
		ctx.fillStyle = "blue";	
		ctx.strokeStyle = "blue";
		ctx.beginPath();
		ctx.moveTo(xOrigin-1, yOrigin-1);
		ctx.lineTo(xOrigin-1, yOrigin-8);
		ctx.stroke();	
		ctx.beginPath();
		ctx.moveTo(xOrigin-1, yOrigin-1);
		ctx.lineTo(xOrigin-8, yOrigin-1);
		ctx.stroke();		
		ctx.font = "12px";
		ctx.textBaseline = "bottom"; 
		ctx.fillText("0,0", xOrigin-20, yOrigin-5);
	}	 
 
 }

function drawRobotsOnCanvas() {
	var canvas = $("#overviewFloorplan")[0];
	var ctx = canvas.getContext("2d");	
	$.each(robotsOnOverview, function(key, value) {					
		var pointSize = 10;			
		ctx.fillStyle = "blue";
		ctx.beginPath();	
		var x = ((value.x / floorPlanImageScale) + floorPlanImageXOffset) * floorPlanImageToWebPageScale;
		var y = (floorPlanImage.height - ((value.y / floorPlanImageScale) + floorPlanImageYOffset)) * floorPlanImageToWebPageScale;			
		ctx.arc(x, y, pointSize, 0, Math.PI * 2, true);
		ctx.fillStyle = 'rgba(0, 0, 255, 0.5)';		
		ctx.fill();	

		var label = value.index.toString();
		ctx.font = "12px";
		ctx.fillStyle = "#ffffff";
		var xLabelLocation = -3;
		var yLabelLocation = 3;
		if (label.length > 1) {
			xLabelLocation = -6;
		}			
		ctx.fillText(label, x+xLabelLocation, y+yLabelLocation);		
	});	
}

function drawSensorsOnCanvas() {
	var canvas = $("#overviewFloorplan")[0];
	var ctx = canvas.getContext("2d");	
	$.each(sensorsOnOverview, function(key, value) {
		if (value.x > 0 && value.y > 0) {
		
			var pointSize = 10;			
			ctx.fillStyle = "green";
			ctx.beginPath();
			var x = ((value.x / floorPlanImageScale) + floorPlanImageXOffset) * floorPlanImageToWebPageScale;
			var y = (floorPlanImage.height - ((value.y / floorPlanImageScale) + floorPlanImageYOffset)) * floorPlanImageToWebPageScale;			
			ctx.arc(x, y, pointSize, 0, Math.PI * 2, true);
			ctx.fillStyle = 'rgba(0, 100, 0, 0.5)';		
			ctx.fill();	

			var label = value.index.toString();
			ctx.font = "12px";
			ctx.fillStyle = "#ffffff";
			var xLabelLocation = -3;
			var yLabelLocation = 3;
			if (label.length > 1) {
				xLabelLocation = -6;
			}			
			ctx.fillText(label, x+xLabelLocation, y+yLabelLocation);		
		}
	});
}

function updateRobotsOnOverview(notification) {
		
	if (typeof floorPlanImage !== "undefined") {

		var temp = 1;
		$.each(notification.data, function () {		
			var dObj = this.position_channel.value;		
			var ran_status = "unknown";
			//if (dObj.ran_status.value == 0) ran_status = "waiting";
			//else if (dObj.ran_status.value == 1) ran_status = "moving";
			//else if (dObj.ran_status.value == 2) ran_status = "acting";
			var objIndex = robotsOnOverview.findIndex((obj => obj.id == this.id));
			if (objIndex == -1) {	
				robotsOnOverview.push({index: temp, id: this.id, ran_status: ran_status, x: dObj.current_position.value.pose.value.position.value.x.value, y: dObj.current_position.value.pose.value.position.value.y.value, theta: dObj.current_position.value.pose.value.orientation.type});
			} else {	
				robotsOnOverview[objIndex].index = temp;
				robotsOnOverview[objIndex].ran_status = ran_status;			
				robotsOnOverview[objIndex].x = dObj.current_position.value.pose.value.position.value.x.value;		
				robotsOnOverview[objIndex].y = dObj.current_position.value.pose.value.position.value.y.value;		
				robotsOnOverview[objIndex].theta = dObj.current_position.value.pose.value.orientation.type;						
			}
			temp++;
		});

		drawImageOnCanvas(floorPlanImage, "#overviewFloorplan");	
		drawRobotsOnCanvas();
		drawSensorsOnCanvas();
		$("#robotsOverviewTbody").empty();
		$.each(robotsOnOverview, function(key, value) {		
			$("#robotsOverviewTbody").append("<tr><td>" + value.index + "</td><td>" + value.id + "</td><td>" + value.ran_status + "</td><td>" + value.x + " m</td><td>" + value.y + " m</td><td>" + Math.round(value.theta * (180/Math.PI) * 100) / 100 + "&#176;</td></tr>");
		});	
	}
}

function updateSensorsOnOverview(notification) {										   
	
	if (typeof floorPlanImage !== "undefined") {
	
		$.each(notification.data, function (i, entity) {	
			if (entity.sensorType.value == ON_OFF_SENSOR) {
				$.ajax({
					type: "GET",
					url: "./api/hmibutton",
					dataType: "json",
					success: function (data) {			
						$(data).each(function(i, item) {
							if (item.ocb_id == entity.sensorID.value) {					
								var objIndex = sensorsOnOverview.findIndex((obj => obj.id == item.text));
								if (objIndex == -1) {
									sensorsOnOverview.push({index: sensorsOnOverview.length+1, id: item.text, type: entity.sensorType.value, x: -1, y: -1});
								} else {
									sensorsOnOverview[objIndex].id = item.text;			
									sensorsOnOverview[objIndex].type = entity.sensorType.value;	
								}							
							}
						});
					    updateSensorsTable();
					}
				});
			} else {	
				var objIndex = sensorsOnOverview.findIndex((obj => obj.id == entity.sensorID.value));
				if (objIndex == -1) {
					sensorsOnOverview.push({index: sensorsOnOverview.length+1, id: entity.sensorID.value, type: entity.sensorType.value, x: -1, y: -1});
				} else {
					sensorsOnOverview[objIndex].id = entity.sensorID.value;			
					sensorsOnOverview[objIndex].type = entity.sensorType.value;	
				}
			    updateSensorsTable();
			}
		});
		
		drawImageOnCanvas(floorPlanImage, "#overviewFloorplan");	
		drawRobotsOnCanvas();
		drawSensorsOnCanvas();
	}
}

function updateSensorsTable() {
	$("#sensorsOverviewTbody").empty();
	$.each(sensorsOnOverview, function(key, value) {		
		$("#sensorsOverviewTbody").append("<tr><td>" + value.index + "</td><td>" + value.id + "</td><td>" + value.type + "</td><td>" + value.x + " m</td><td>" + value.y + " m</td><td style=\"text-align:center\"><input type=\"radio\" name=\"sensorLocation\" id=\"selectedSensor_" + value.id + "\" value=\"selectedSensor_" + value.id + "\"></td></tr>");			
	});
}

function setSensorLocation(event) {	
	if ($("input[name=\"sensorLocation\"]:checked").val()) {
		var canvas = $("#overviewFloorplan")[0];
		var ctx = canvas.getContext("2d");	
		var rect = canvas.getBoundingClientRect();
		var sensorId = $("input[type=radio][name=sensorLocation]:checked").attr("id").replace("selectedSensor_", "");	
		var x = ((event.clientX - rect.left) / floorPlanImageToWebPageScale - floorPlanImageXOffset) * floorPlanImageScale;
		var y = (floorPlanImageYOffset + floorPlanImage.height - (event.clientY - rect.top) / floorPlanImageToWebPageScale) * floorPlanImageScale;
		var objIndex = sensorsOnOverview.findIndex((obj => obj.id == sensorId));
		if (objIndex != -1) {
			sensorsOnOverview[objIndex].x = Math.round(x);
			sensorsOnOverview[objIndex].y = Math.round(y);	
			drawImageOnCanvas(floorPlanImage, "#overviewFloorplan");	
			drawRobotsOnCanvas();	
			drawSensorsOnCanvas();
			updateSensorsTable();			
		}
	}
		
}
