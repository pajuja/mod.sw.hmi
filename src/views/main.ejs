<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<meta name="description" content="">
		<meta name="author" content="">

		<title>HMI</title>

		<link rel="stylesheet" href="/css/bootstrap.min.css">
		<!-- Optional theme -->
        <link rel="stylesheet" href="/css/bootstrap-theme.min.css">	
        <link rel="stylesheet" href="/css/style.css">			

		<script src="/js/NGSI.js"></script> 
		<script src="/js/jquery-3.3.1.min.js"></script> 		
		<script src="/js/bootstrap.min.js"></script> 	
		<script src="/js/bootbox.min.js"></script> 			
		<script src="/js/Chart.bundle.min.js"></script>
 
		<script>
		
			var floorPlanImage;
			var floorPlanImageScale = 1;
			var floorPlanImageToWebPageScale = 1;
			var floorPlanImageXOffset = 0;
			var floorPlanImageYOffset = 0;
		
			$(document).ready(function() {
							
				$.ajax({
					type: "GET",
					url: "./api/config",
					dataType: "json",
					success: function (data) {
						var ngsiConnection = null;
						$(data).each(function(i, item) {
							<% if (user && user.role == "admin") { %>							
							$("#ocb_host").val(item.ocb_host);	
							$("#ocb_port").val(item.ocb_port);	
							$("#ngsi_proxy_host").val(item.ngsi_proxy_host);	
							$("#ngsi_proxy_port").val(item.ngsi_proxy_port);
							<% } %>														
							ngsiConnection = new NGSI.Connection("http://" + item.ocb_host + ":" + item.ocb_port, {
								ngsi_proxy_url: "http://" + item.ngsi_proxy_host + ":" + item.ngsi_proxy_port
							});
						})
						$.ajax({
							type: "GET",
							url: "./api/fp",
							dataType: "json",
							success: function (data) {					
								var created = "";
								var imgURL = "";
								var name = "";
								var xoffset = "";
								var yoffset = "";
								$(data).each(function(i, item) {						
									if (item.created > created) {						
										created = item.created;
										imgURL = item.imgurl;
										name = item.name;
										floorPlanImageScale = item.scale;
										floorPlanImageXOffset = item.xoffset;
										floorPlanImageYOffset = item.yoffset;
									}						
								})
								if (imgURL != "") {
									floorPlanImage = new Image();
									floorPlanImage.onload = function() {		
										drawImageOnCanvas(floorPlanImage, "#overviewFloorplan");	
										drawImageOnCanvas(floorPlanImage, "#floorplan");
										$("#floorplanInfo").html("<p><strong>floor plan:</strong> " + name + ", <strong>scale:</strong> " + floorPlanImageScale + " cm/px, <strong>x-offset:</strong> " + floorPlanImageXOffset + " px, <strong>y-offset:</strong> " + floorPlanImageYOffset + " px</p>");
									};
									floorPlanImage.src = imgURL;	
								}
														
								if (ngsiConnection != null) {
						
									/* INITIALIZATIONS */				
									initTaskSpecifications(ngsiConnection);						    
									initCurrentTasks(ngsiConnection);										
									initRobotsTable(ngsiConnection);									
									initSensorData(ngsiConnection);		
									<% if (user && user.role == "admin") { %>
										initSystemSettings();
										initUsers();
									<% } %>

									/* SUBSCRIPTIONS */
									ngsiConnection.v2.createSubscription({
										"description": "Updating task specifications",
										"subject": { "entities": [ { "idPattern": ".*", "type": "TaskSpecState" } ] },
										"notification": {
											"callback": function (notification) {				   
												updateTaskSpecifications(notification);
											}
										},
										//"expires": "2040-04-05T14:00:00.00Z",
										//"throttling": 5
									}).then(
										(response) => {
											//console.log("Created subscription: " + JSON.stringify(response));
										}, (error) => {
											//console.log(error);
										}
									);		

									ngsiConnection.v2.createSubscription({
										"description": "Updating current tasks",
										"subject": { "entities": [ { "idPattern": ".*", "type": "Task" } ] },
										"notification": {
											"callback": function (notification) {				   
												updateCurrentTasks(notification);
											}
										},
										//"expires": "2040-04-05T14:00:00.00Z",
										//"throttling": 5
									}).then(
										(response) => {
											//console.log("Created subscription: " + JSON.stringify(response));
										}, (error) => {
											//console.log(error);
										}
									);										
									
									ngsiConnection.v2.createSubscription({
										"description": "Updating robot data",
										"subject": { "entities": [ { "idPattern": ".*", "type": "ROBOT" } ], "condition": { "attrs": [ "status_channel" ] } },
										"notification": {
											"callback": function (notification) {
												updateRobotsOnOverview(notification);
												updateRobotsTable(notification);
										   },
										   "attrs": [ "status_channel" ]
										},
										//"expires": "2040-04-05T14:00:00.00Z",
										//"throttling": 5
									}).then(
										(response) => {
											//console.log("Created subscription: " + JSON.stringify(response));
										}, (error) => {
											//console.log(error);
										}
									);
									
									ngsiConnection.v2.createSubscription({
										"description": "Updating sensor data",
										"subject": { "entities": [ { "idPattern": ".*", "type": "SensorAgent" } ], "condition": { "attrs": [ "sensorData" ] } },
										"notification": {
											"callback": function (notification) {
												updateSensorsOnOverview(notification);
												updateSensorData(notification);					
											},
											"attrs": [ "sensorData" ]
										},
										//"expires": "2040-04-05T14:00:00.00Z",
										//"throttling": 5
									}).then(
										(response) => {
											//console.log("Created subscription: " + JSON.stringify(response));
										}, (error) => {
											//console.log(error);
										}
									);							
								}
							}
						});
					}
				});
			
				$("#sendTaskSpecification").click(function() {
					sendTaskSpecification();
					return false;
				});			
			});	

			<% include ./generalFunctions.ejs %>			
			<% include ./overview/functions.ejs %>		
			<% include ./floorplan/functions.ejs %>		
			<% include ./task_management/functions.ejs %>
			<% include ./robots/functions.ejs %>
			<% include ./sensor_data/functions.ejs %>		
			<% if (user && user.role == "admin") { %>
				<% include ./system_settings/functions.ejs %>		
				<% include ./user_management/functions.ejs %>
			<% } %>		
		</script>
	
	</head>

	<body>
		<div class="container">
		    <div class="text-right" >
				<form action="/logout" method="post">
					<button class="btn btn-default btn-sm" style=" margin-top:10px;" disabled>Logged in as <%= user.name %>&nbsp;</button>&nbsp;<button type="submit" class="btn btn-default btn-sm" style=" margin-top:10px;"><%= __("logout") %></button>
                </form>
			</div>
			<div id="generalAlert"></div>
			<ul class="nav nav-tabs" style=" margin-top:10px;" role="tablist">
				<li class="active"><a href="#overviewTab" role="tab" data-toggle="tab">Overview</a></li>
				<li><a href="#floorplansTab" role="tab" data-toggle="tab">Floor Plan Management</a></li>	
				<li><a href="#taskManagementTab" role="tab" data-toggle="tab">Task Management</a></li>						
				<li><a href="#robotsTab" role="tab" data-toggle="tab">Robots</a></li>
				<li><a href="#sensorDataTab" role="tab" data-toggle="tab">Sensor Data</a></li>
				<% if (user && user.role == "admin") { %>  
				<li><a href="#usersTab" role="tab" data-toggle="tab">User Management</a></li>					
				<li><a href="#settingsTab" role="tab" data-toggle="tab">System Settings</a></li>				
				<% } %>
			</ul>
			<div class="tab-content">
				<div class="tab-pane active" id="overviewTab" style="margin-top:10px;">
					<% include ./overview/tabContent.ejs %>					
				</div>
				<div class="tab-pane" id="floorplansTab" style="margin-top:10px;">
					<% include ./floorplan/tabContent.ejs %>
				</div>
				<div class="tab-pane" id="taskManagementTab" style="margin-top:0px;">
					<% include ./task_management/tabContent.ejs %>				

				</div>			
				<div class="tab-pane" id="robotsTab" style="margin-top:-20px;">
					<% include ./robots/tabContent.ejs %>			
				</div>			
				<div class="tab-pane" id="sensorDataTab" style="margin-top:10px;">
					<% include ./sensor_data/tabContent.ejs %>
				</div> 			
				<% if (user && user.role == "admin") { %>  			
					<div class="tab-pane" id="usersTab" style="margin-top:10px;">
						<% include ./user_management/tabContent.ejs %>
					</div>
					<div class="tab-pane" id="settingsTab" style="margin-top:10px;">
						<% include ./system_settings/tabContent.ejs %>
					</div>
                <% } %>				
			</div>	
		</div>
	</body>
</html>

<!-- TODO:
- Uploading a layout (PNG)
- Entering the scale (cm/px) for transformation, x-y-offset 
- (orientation will be done by SystemIntegrator) 

- Adding Sensors to the layout, including mapping-name to sensor id, appearance type (button, occupancy, ...), position, ...

- Displaying a layout     
- Displaying objects (agvs, sensors)
- Displaying the current position (x,y,theta) of the AGV in the HMI
- Displaying locations (palette position, charging, ...) (static)
- Displaying x-y-coordinates of objects(agvs, sensors)

- storing/retrieving of layout, scale and x-y-offset, configurations inside a database

- task specification text editor (first draft for copy/paste)

- custom user interface for engino use case will have individual Sensor Buttons to send the San entity (create/update needed)
  -- entities provided by SAN
-->	